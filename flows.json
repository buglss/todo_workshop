[
    {
        "id": "abba7bf6e29b6166",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fbf7fc6ac617eac6",
        "type": "http in",
        "z": "abba7bf6e29b6166",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "c46024052af4daeb"
            ]
        ]
    },
    {
        "id": "87c409a2f2048576",
        "type": "http response",
        "z": "abba7bf6e29b6166",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 160,
        "wires": []
    },
    {
        "id": "6b1bcf59563c6191",
        "type": "template",
        "z": "abba7bf6e29b6166",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar Listesi</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/opt/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control {{#error}}border-danger{{/error}}\" placeholder=\"Yoğurt al... Ekmek al...\">\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary px-5\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"card mt-2 overflow-hidden\">\n                    <div class=\"card-body p-0\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover m-0\">\n                                <thead class=\"table-dark\">\n                                    <tr>\n                                        <th colspan=\"2\">İş</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {{#payload}}\n                                    <tr valign=\"middle\">\n                                        <td>\n                                            {{#done}}\n                                            <h4 class=\"text-muted\"><del>{{name}}</del></h4>\n                                            {{/done}}\n                                            {{^done}}\n                                            <h4>{{name}}</h4>\n                                            {{/done}}\n                                            <div class=\"badge bg-secondary\">\n                                                <small><i class=\"bi bi-calendar\"></i> {{date}} {{time}}</small></div>\n                                        </td>\n                                        <td align=\"right\">\n                                            <div class=\"btn-group\">\n                                                <form method=\"POST\">\n                                                    <input type=\"hidden\" name=\"id\" value=\"{{id}}\"/>\n                                                {{#done}}\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Aç\" type=\"submit\" formaction=\"/opt/open\" class=\"btn btn-warning\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                                                    {{/done}}\n                                                    {{^done}}\n                                                    <a data-bs-toggle=\"tooltip\" data-bs-title=\"Düzenle\" href=\"/edit/{{id}}\" class=\"btn btn-info\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Hatırlatıcı\" type=\"submit\" class=\"btn btn-secondary\"><i class=\"bi bi-alarm-fill\"></i></button>\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Tamamla\" type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-success\"><i class=\"bi bi-check-lg\"></i></button>\n                                                    {{/done}}\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Sil\" type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-danger\"><i class=\"bi bi-trash2-fill\"></i></button>\n                                                </form>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {{/payload}}\n                                    {{^payload}}\n                                    <tr>\n                                        <td colspan=\"2\" class=\"text-muted text-center\">Henüz hiç giriş yapılmadı...</td>\n                                    </tr>\n                                    {{/payload}}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 460,
        "y": 160,
        "wires": [
            [
                "87c409a2f2048576"
            ]
        ]
    },
    {
        "id": "12762f88b792841c",
        "type": "function",
        "z": "abba7bf6e29b6166",
        "name": "DB",
        "func": "// Flush DB\nglobal.set(\"DB\", {\n    todo: []\n})",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst DB = global.get(\"DB\") || {\n    todo: []\n}\n\n/* \n * TODO DB Şema\n * id: NOW\n * name: \"\"\n * done: true|false\n * stamp: {\n *  createdAt: NOW,\n *  ip: IP,\n *  username: \"\"\n *  email: \"\"\n *  date: \"GG.AA.YYYY\"\n *  time: \"SS:DD:NN\"\n * }\n**/\n\nglobal.set(\"DB\", DB)",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": []
    },
    {
        "id": "5b2f2d302737e7a5",
        "type": "inject",
        "z": "abba7bf6e29b6166",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "12762f88b792841c"
            ]
        ]
    },
    {
        "id": "c46024052af4daeb",
        "type": "function",
        "z": "abba7bf6e29b6166",
        "name": "db.todo.find()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "6b1bcf59563c6191"
            ]
        ]
    },
    {
        "id": "73e6180d112e7e54",
        "type": "link in",
        "z": "abba7bf6e29b6166",
        "name": "link in 1",
        "links": [
            "7c4c185aa302a1fe",
            "3c8d36e2ad30af6a",
            "932198c039953859",
            "decf4a527c9f85db",
            "fd1822284bcceaaa",
            "ba4ef6b938761731",
            "477e1c3b889d302a",
            "1e2851ee92749943",
            "b6ea02a042c1970b",
            "93da13d1f4bf8b74"
        ],
        "x": 145,
        "y": 120,
        "wires": [
            [
                "c46024052af4daeb"
            ]
        ]
    },
    {
        "id": "79cbd5238e7ebac3",
        "type": "http in",
        "z": "abba7bf6e29b6166",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "deb270ac729e057e"
            ]
        ]
    },
    {
        "id": "deb270ac729e057e",
        "type": "function",
        "z": "abba7bf6e29b6166",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Silmek\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlamak\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Açmak\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Eklemek\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncellemek\",\n        requireArgs: [\"id\", \"name\"]\n    }\n}\n\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n    msg.error = {\n        message: `${msg.req.params.type} geçersiz bir parametre değeridir.`\n    }\n    return [null, msg]\n}\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `${typeLookup[msg.req.params.type].text} istediğiniz elemanın ${typeLookup[msg.req.params.type].requireArgs} bilgisi(leri) olmalı.`\n    }\n    return [null, msg]\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "f5ff2c6d900e8746"
            ],
            [
                "1e2851ee92749943"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "f5ff2c6d900e8746",
        "type": "function",
        "z": "abba7bf6e29b6166",
        "name": "db.todo.opt()",
        "func": "const DB = global.get(\"DB\")\n\nlet todo = DB.todo\nconst date = new Date()\nconst now = date.getTime()\n\nif (msg.req.params.type === \"add\") {\n    todo.push({\n        id: now,\n        name: msg.payload.name,\n        done: false,\n        stamp: {\n            createdAt: now,\n            ip: msg.req.ip,\n            username: \"\",\n            email: \"\"\n        },\n        date: date.toLocaleDateString(\"TR\"), // DD.AA.YYYY\n        time: date.toLocaleTimeString(\"TR\") // SS:DD:NN\n    })\n} else {\n    const index = todo.findIndex(x => x.id == msg.payload.id)\n\n    if (!~index) {\n        msg.error = {\n            message: \"İd ile eşleşen bir kayıt bulunamadı.\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type === \"update\" && todo[index].done) {\n        msg.error = {\n            message: \"Tamamlanan işler güncellenemez.\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type === \"trash\") {\n        todo.splice(index, 1)\n    } else {\n        switch (msg.req.params.type) {\n            case \"complete\":\n                todo[index].done = true\n                break;\n            case \"open\":\n                todo[index].done = false\n                break;\n            case \"update\":\n                todo[index].name = msg.payload.name\n                break;\n        }\n        todo[index].stamp = {\n            createdAt: now,\n            ip: msg.req.ip,\n            username: \"\",\n            email: \"\"\n        }\n        todo[index].date = date.toLocaleDateString(\"TR\") // DD.AA.YYYY\n        todo[index].time = date.toLocaleTimeString(\"TR\") // SS:DD:NN\n    }\n}\n\nDB.todo = todo\n\nglobal.set(\"DB\", DB)\n\nreturn msg",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "488c01fef752eb02"
            ],
            [
                "b6ea02a042c1970b"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err"
        ]
    },
    {
        "id": "1e2851ee92749943",
        "type": "link out",
        "z": "abba7bf6e29b6166",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "73e6180d112e7e54"
        ],
        "x": 445,
        "y": 400,
        "wires": []
    },
    {
        "id": "488c01fef752eb02",
        "type": "http response",
        "z": "abba7bf6e29b6166",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 680,
        "y": 340,
        "wires": []
    },
    {
        "id": "b6ea02a042c1970b",
        "type": "link out",
        "z": "abba7bf6e29b6166",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "73e6180d112e7e54"
        ],
        "x": 645,
        "y": 380,
        "wires": []
    },
    {
        "id": "9e01fe44c18931b1",
        "type": "http in",
        "z": "abba7bf6e29b6166",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "538e8cd1d63357e9"
            ]
        ]
    },
    {
        "id": "538e8cd1d63357e9",
        "type": "function",
        "z": "abba7bf6e29b6166",
        "name": "db.todo.findOne()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo.find(x => x.id == msg.req.params.id)\n\nif(!msg.payload) {\n    msg.error = {\n        message: \"İd ile eşleşen bir kayıt bulunamadı.\"\n    }\n    return [null, msg]\n}\n\nif (msg.payload.done) {\n    msg.error = {\n        message: \"Tamamlanan işler güncellenemez.\"\n    }\n    return [null, msg]\n}\n\nreturn msg",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "f80e60a48a56e1af"
            ],
            [
                "93da13d1f4bf8b74"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err"
        ]
    },
    {
        "id": "f80e60a48a56e1af",
        "type": "template",
        "z": "abba7bf6e29b6166",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar Listesi</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/opt/update\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\"/>\n                    <div class=\"mb-3\">\n                        <input required type=\"text\" name=\"name\" value=\"{{payload.name}}\" class=\"form-control form-control-lg {{#error}}border-danger{{/error}}{{^error}}border-info{{/error}}\" placeholder=\"Yoğurt al... Ekmek al...\">\n                    </div>\n                    <div class=\"mb-3 float-end\">\n                        <a class=\"btn btn-warning\" href=\"/\">Vazgeç</a>\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-success px-5\" type=\"submit\">Güncelle</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 540,
        "y": 240,
        "wires": [
            [
                "27e2e6219bf0b171"
            ]
        ]
    },
    {
        "id": "93da13d1f4bf8b74",
        "type": "link out",
        "z": "abba7bf6e29b6166",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "73e6180d112e7e54"
        ],
        "x": 495,
        "y": 280,
        "wires": []
    },
    {
        "id": "27e2e6219bf0b171",
        "type": "http response",
        "z": "abba7bf6e29b6166",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 240,
        "wires": []
    }
]